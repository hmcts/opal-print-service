plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.springframework.boot' version '3.2.3'
  id 'org.owasp.dependencycheck' version '9.0.10'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '4.4.1.3373'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.1.3'
  id 'org.flywaydb.flyway' version '10.10.0'
}

group = 'uk.gov.hmcts'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functionalPrintTests(type: Test) {
  description = "Runs functional print tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/functional"))
  gradle.startParameter.continueOnFailure = true
  testLogging.showStandardStreams = true
  systemProperty "cucumber.filter.tags", "not @Ignore"
}
task copyFunctionalReport(type: Copy){
  from("${rootDir}/target/site/serenity")
  into("${rootDir}/functional-test-report")
  logger.quiet("Functional Test Report available at - file://${rootDir}/functional-test-report/index.html")
}

task functional() {
  description = "Runs functional tests"
  group = "Verification"
  gradle.startParameter.continueOnFailure = true
  dependsOn('clearReports','functionalPrintTests', 'aggregate', 'copyFunctionalReport')
  tasks.functionalPrintTests.mustRunAfter clearReports
  tasks.aggregate.mustRunAfter functionalPrintTests
  tasks.copyFunctionalReport.mustRunAfter aggregate

}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.14.2'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: opal-print-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:opal-print-service"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.23.1"
  logbackVersion = "1.5.3"
  serenityVersion = "4.1.4"
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.4.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.4'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

  implementation group: 'io.rest-assured', name: 'rest-assured'

  implementation 'org.flywaydb:flyway-core'
  implementation 'org.postgresql:postgresql'

  implementation 'org.projectlombok:lombok:1.18.30'
  annotationProcessor 'org.projectlombok:lombok:1.18.30'

  testImplementation 'org.projectlombok:lombok:1.18.30'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

  implementation group: 'org.apache.xmlgraphics', name: 'fop', version: '2.9'
  implementation group: 'org.apache.xmlgraphics', name: 'fop-core', version: '2.9'
  implementation group: 'org.apache.xmlgraphics', name: 'fop-events', version: '2.9'
  implementation group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.9'
  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.30'
  implementation group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.4'

  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.5'

  testImplementation 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
  testImplementation 'org.testcontainers:postgresql'

  testImplementation(platform('org.junit:junit-bom:5.10.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
  testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'

  testImplementation "net.serenity-bdd:serenity-core:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-rest-assured:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-report-resources:${serenityVersion}"

  testImplementation "net.serenity-bdd:serenity-cucumber:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-ensure:${serenityVersion}"
}

mainClassName = 'uk.gov.hmcts.opal.Application'

bootJar {
  archiveFileName = "opal-print-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}
rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
  println "Flyway jbdc property 'url' (derived from System property 'FLYWAY_URL'?) is: ${url}"
}
